// Code generated by MockGen. DO NOT EDIT.
// Source: consumer/usecase/usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/viswals/core/models"
	utils "github.com/viswals/core/pkg/utils"
)

// MockIConsumerRepository is a mock of IConsumerRepository interface.
type MockIConsumerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIConsumerRepositoryMockRecorder
}

// MockIConsumerRepositoryMockRecorder is the mock recorder for MockIConsumerRepository.
type MockIConsumerRepositoryMockRecorder struct {
	mock *MockIConsumerRepository
}

// NewMockIConsumerRepository creates a new mock instance.
func NewMockIConsumerRepository(ctrl *gomock.Controller) *MockIConsumerRepository {
	mock := &MockIConsumerRepository{ctrl: ctrl}
	mock.recorder = &MockIConsumerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConsumerRepository) EXPECT() *MockIConsumerRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIConsumerRepository) CreateUser(ctx context.Context, user models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIConsumerRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIConsumerRepository)(nil).CreateUser), ctx, user)
}

// GetAllUsers mocks base method.
func (m *MockIConsumerRepository) GetAllUsers(ctx context.Context, pagination utils.PaginationParams, filters []utils.Filter) ([]models.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx, pagination, filters)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockIConsumerRepositoryMockRecorder) GetAllUsers(ctx, pagination, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockIConsumerRepository)(nil).GetAllUsers), ctx, pagination, filters)
}

// GetUserByEmail mocks base method.
func (m *MockIConsumerRepository) GetUserByEmail(ctx context.Context, email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIConsumerRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIConsumerRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserById mocks base method.
func (m *MockIConsumerRepository) GetUserById(ctx context.Context, id int64) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIConsumerRepositoryMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIConsumerRepository)(nil).GetUserById), ctx, id)
}
