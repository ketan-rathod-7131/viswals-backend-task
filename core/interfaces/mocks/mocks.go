// Code generated by MockGen. DO NOT EDIT.
// Source: core/interfaces/interfaces.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	amqp091 "github.com/rabbitmq/amqp091-go"
	rabbitmq "github.com/viswals/core/infrastructure/rabbitmq"
	zap "go.uber.org/zap"
)

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockILogger) Debug(message string, args ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockILoggerMockRecorder) Debug(message interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockILogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockILogger) Error(message string, args ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockILoggerMockRecorder) Error(message interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILogger)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockILogger) Fatal(message string, args ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockILoggerMockRecorder) Fatal(message interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockILogger)(nil).Fatal), varargs...)
}

// Info mocks base method.
func (m *MockILogger) Info(message string, args ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockILoggerMockRecorder) Info(message interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockILogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockILogger) Warn(message string, args ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockILoggerMockRecorder) Warn(message interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockILogger)(nil).Warn), varargs...)
}

// MockICacheService is a mock of ICacheService interface.
type MockICacheService struct {
	ctrl     *gomock.Controller
	recorder *MockICacheServiceMockRecorder
}

// MockICacheServiceMockRecorder is the mock recorder for MockICacheService.
type MockICacheServiceMockRecorder struct {
	mock *MockICacheService
}

// NewMockICacheService creates a new mock instance.
func NewMockICacheService(ctrl *gomock.Controller) *MockICacheService {
	mock := &MockICacheService{ctrl: ctrl}
	mock.recorder = &MockICacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICacheService) EXPECT() *MockICacheServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockICacheService) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICacheServiceMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICacheService)(nil).Delete), ctx, key)
}

// Exists mocks base method.
func (m *MockICacheService) Exists(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockICacheServiceMockRecorder) Exists(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockICacheService)(nil).Exists), ctx, key)
}

// Get mocks base method.
func (m *MockICacheService) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICacheServiceMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICacheService)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockICacheService) Set(ctx context.Context, key, value string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockICacheServiceMockRecorder) Set(ctx, key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockICacheService)(nil).Set), ctx, key, value, ttl)
}

// MockIEncryptionService is a mock of IEncryptionService interface.
type MockIEncryptionService struct {
	ctrl     *gomock.Controller
	recorder *MockIEncryptionServiceMockRecorder
}

// MockIEncryptionServiceMockRecorder is the mock recorder for MockIEncryptionService.
type MockIEncryptionServiceMockRecorder struct {
	mock *MockIEncryptionService
}

// NewMockIEncryptionService creates a new mock instance.
func NewMockIEncryptionService(ctrl *gomock.Controller) *MockIEncryptionService {
	mock := &MockIEncryptionService{ctrl: ctrl}
	mock.recorder = &MockIEncryptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEncryptionService) EXPECT() *MockIEncryptionServiceMockRecorder {
	return m.recorder
}

// CompareHash mocks base method.
func (m *MockIEncryptionService) CompareHash(data, hash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHash", data, hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompareHash indicates an expected call of CompareHash.
func (mr *MockIEncryptionServiceMockRecorder) CompareHash(data, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHash", reflect.TypeOf((*MockIEncryptionService)(nil).CompareHash), data, hash)
}

// Decrypt mocks base method.
func (m *MockIEncryptionService) Decrypt(data string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockIEncryptionServiceMockRecorder) Decrypt(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockIEncryptionService)(nil).Decrypt), data)
}

// Encrypt mocks base method.
func (m *MockIEncryptionService) Encrypt(data string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockIEncryptionServiceMockRecorder) Encrypt(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockIEncryptionService)(nil).Encrypt), data)
}

// Hash mocks base method.
func (m *MockIEncryptionService) Hash(data string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockIEncryptionServiceMockRecorder) Hash(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockIEncryptionService)(nil).Hash), data)
}

// MockIQueueService is a mock of IQueueService interface.
type MockIQueueService struct {
	ctrl     *gomock.Controller
	recorder *MockIQueueServiceMockRecorder
}

// MockIQueueServiceMockRecorder is the mock recorder for MockIQueueService.
type MockIQueueServiceMockRecorder struct {
	mock *MockIQueueService
}

// NewMockIQueueService creates a new mock instance.
func NewMockIQueueService(ctrl *gomock.Controller) *MockIQueueService {
	mock := &MockIQueueService{ctrl: ctrl}
	mock.recorder = &MockIQueueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQueueService) EXPECT() *MockIQueueServiceMockRecorder {
	return m.recorder
}

// ConsumeWithContext mocks base method.
func (m *MockIQueueService) ConsumeWithContext(ctx context.Context, queue string, options ...rabbitmq.ConsumeOption) (<-chan amqp091.Delivery, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, queue}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConsumeWithContext", varargs...)
	ret0, _ := ret[0].(<-chan amqp091.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumeWithContext indicates an expected call of ConsumeWithContext.
func (mr *MockIQueueServiceMockRecorder) ConsumeWithContext(ctx, queue interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, queue}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeWithContext", reflect.TypeOf((*MockIQueueService)(nil).ConsumeWithContext), varargs...)
}

// PublishWithContext mocks base method.
func (m *MockIQueueService) PublishWithContext(ctx context.Context, options ...rabbitmq.PublishOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithContext indicates an expected call of PublishWithContext.
func (mr *MockIQueueServiceMockRecorder) PublishWithContext(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithContext", reflect.TypeOf((*MockIQueueService)(nil).PublishWithContext), varargs...)
}

// Qos mocks base method.
func (m *MockIQueueService) Qos(prefetchCount, prefetchSize int, global bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Qos", prefetchCount, prefetchSize, global)
	ret0, _ := ret[0].(error)
	return ret0
}

// Qos indicates an expected call of Qos.
func (mr *MockIQueueServiceMockRecorder) Qos(prefetchCount, prefetchSize, global interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Qos", reflect.TypeOf((*MockIQueueService)(nil).Qos), prefetchCount, prefetchSize, global)
}

// QueueDeclare mocks base method.
func (m *MockIQueueService) QueueDeclare(name string, options ...rabbitmq.QueueOption) (amqp091.Queue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueueDeclare", varargs...)
	ret0, _ := ret[0].(amqp091.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueDeclare indicates an expected call of QueueDeclare.
func (mr *MockIQueueServiceMockRecorder) QueueDeclare(name interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeclare", reflect.TypeOf((*MockIQueueService)(nil).QueueDeclare), varargs...)
}
